# -*- coding: utf-8 -*-
"""IBM-project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ip5yFdAQMzjaGakLIK7G1F4pVgKuz0uX

***EMPLOYEE SALARY PREDOCTION USING***
"""

import pandas as pd

data = pd.read_csv("/content/drive/MyDrive/adult 3.csv")

data

#to display no. of ros and cols
data.shape

#to display default 1st 5 rows
data.head()

data.head(9)

#to display last 5 rows
data.tail()

data.tail(7)

#to find  null values
data.isna()

#to retreive all the null vals under each col
data.isna().sum()

print(data.occupation.value_counts())

print(data.gender.value_counts())

print(data['marital-status'].value_counts())

print(data['education'].value_counts())

print(data['workclass'].value_counts())

#replacing ? with 'others'
data.occupation.replace({'?':'Others'},inplace=True)

print(data.occupation.replace({'?':'Others'},inplace=True))

print(data.occupation.value_counts())

data

data.workclass.replace({'?':'NotListed'},inplace=True)

print(data['workclass'].value_counts())

data

data = data[data['workclass']!='Without-pay']
data = data[data['workclass']!='Never-worked']

print(data['workclass'].value_counts())

data.shape

data = data[data['education']!='5th-6th']
data = data[data['education']!='1st-4th']
data = data[data['education']!='Preschool']

print(data['education'].value_counts())

data.shape

#redundancy
data.drop(columns = ['education'], inplace=True)

data.columns

data

#outlier
import matplotlib.pyplot as plt
plt.boxplot(data['age'])
plt.show()

#outliers removed
data = data[(data['age']<=75)&(data['age']>=17)]

plt.boxplot(data['age'])
plt.show()

"""ENCODING"""

#label encoding
from sklearn.preprocessing import LabelEncoder
encoder=LabelEncoder()
data['workclass']=encoder.fit_transform(data['workclass'])
data['marital-status']=encoder.fit_transform(data['marital-status'])
data['occupation']=encoder.fit_transform(data['occupation'])  #farming 0, sales 1, armed forces 2
data['relationship']=encoder.fit_transform(data['relationship'])
data['race']=encoder.fit_transform(data['race'])
data['gender']=encoder.fit_transform(data['gender'])
data['native-country']=encoder.fit_transform(data['native-country'])

data

x =data.drop(columns=['income'])
y=data['income']

x

y

#scaling
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
x = scaler.fit_transform(x)
x

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.2, random_state=23, stratify=y)

xtrain

# machine learning algorithm
from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier()
knn.fit(xtrain, ytrain)  #input and output training data
predict=knn.predict(xtest) #predicting using testing data
predict   # predicted value

from sklearn.metrics import accuracy_score
accuracy_score(ytest, predict)

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(xtrain, ytrain)
predict1=lr.predict(xtest)
predict1

from sklearn.metrics import accuracy_score
accuracy_score(ytest, predict1)

from sklearn.neural_network import MLPClassifier
clf=MLPClassifier(solver='adam',hidden_layer_sizes=(5,2), random_state=2, max_iter=2000)
clf.fit(xtrain, ytrain)
predict2=clf.predict(xtest)
predict2

from sklearn.metrics import accuracy_score
accuracy_score(ytest, predict2)

# machine learning algorithm
from sklearn.ensemble import RandomForestClassifier

# Train Random Forest Model
model = RandomForestClassifier(random_state=2)
model.fit(xtrain, ytrain)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Evaluation
y_pred = model.predict(xtest)
print("\nâœ… Accuracy:", accuracy_score(ytest, y_pred))
print("\nâœ… Classification Report:\n", classification_report(ytest, y_pred))
print("\nâœ… Confusion Matrix:\n", confusion_matrix(ytest, y_pred))

# Visualization - Accuracy Bar Chart
results = {'RandomForest': accuracy_score(ytest, y_pred)}
plt.bar(results.keys(), results.values(), color='skyblue')
plt.ylabel('Accuracy Score')
plt.title('Model Accuracy')
plt.grid(True)
plt.show()

"""# ðŸ“Œ Predict Salary from User Inputs via Console"""

print("\nðŸ”Ž Enter Employee Details to Predict Salary Group\n")

# Get inputs from the user
age = int(input("Enter age (18â€“90): "))
workclass = int(input("Enter workclass code (e.g., Private=4, Self-emp-not-inc=6, Other=8): "))
fnlwgt = int(input("Enter final weight (e.g., 10000â€“1000000): "))
edu_num = int(input("Enter education number (1â€“16): "))
marital_status = int(input("Enter marital status code (e.g., Never-married=4, Married-civ-spouse=2): "))
occupation = int(input("Enter occupation code (e.g., Exec-managerial=3, Other=12): "))
relationship = int(input("Enter relationship code (e.g., Husband=0, Own-child=1): "))
race = int(input("Enter race code (e.g., White=4, Black=0, Other=3): "))
gender = int(input("Enter gender (Male=1, Female=0): "))
capital_gain = int(input("Enter capital gain: "))
capital_loss = int(input("Enter capital loss: "))
hours_per_week = int(input("Enter hours worked per week: "))
native_country = int(input("Enter native country code (e.g., United-States=38, Other=0): "))

# Create a DataFrame with user input
user_input_df = pd.DataFrame({
    'age': [age],
    'workclass': [workclass],
    'fnlwgt': [fnlwgt],
    'educational-num': [edu_num],
    'marital-status': [marital_status],
    'occupation': [occupation],
    'relationship': [relationship],
    'race': [race],
    'gender': [gender],
    'capital-gain': [capital_gain],
    'capital-loss': [capital_loss],
    'hours-per-week': [hours_per_week],
    'native-country': [native_country]
})

# Convert the user input DataFrame to a numpy array
user_input_array = user_input_df.to_numpy()

# Make prediction
prediction = model.predict(user_input_array)
result = '>50K' if prediction[0] == 1 else '<=50K'

print("\nâœ… The predicted salary group is:", result)

# ðŸ“Œ STEP 10: Save the Best Model
joblib.dump(model, "best_model.pkl")
print("\nðŸŽ¯ Saved the trained Random Forest model as best_model.pkl")

from google.colab import files
files.download("best_model.pkl")